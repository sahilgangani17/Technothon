 Function Parameters in Python 
@START
Functions are awesome because they let us pass data and make them flexible! The values you send into a function are called parameters (or arguments). Let’s break it down!
@END
@START
 1. Positional Parameters (Order Matters!)
These are the default way to pass arguments. The order must match the function definition.
Example:
\t def greet(name, age):
\t    print(f"Hello {name}, you are {age} years old! ")
\t    greet("Alice", 25) 
Output:
\t Hello Alice, you are 25 years old!
 Note: "Alice" is passed to name, and 25 to age in the same order.
@END
@START
2. Default Parameters (Set a Backup Value!)
If no value is given, Python uses the default value instead.
Example:
\t def greet(name="Guest"):
\t     print(f"Hello {name}! ")
\t     greet()  # Output: Hello Guest!
\t     greet("Bob")  # Output: Hello Bob!
Why use default values? To avoid errors when arguments are missing!
@END
@START
3. Keyword Arguments (Order Doesn’t Matter!)
Instead of relying on position, we specify parameter names while calling the function!
Example:
\t  def order(food, drink):
\t     print(f"You ordered {food} with {drink}.")
\t     order(drink="Coke", food="Pizza")  
Output: 
\t You ordered Pizza with Coke.
Why use this
- Makes code clearer
- No need to remember the order!
@END
@START
4. Arbitrary Arguments (args) – Multiple Values!
Sometimes, we don’t know how many arguments we need. args allows passing multiple values!
Example:
\t def sum_numbers(*nums):
\t     total = sum(nums)
\t     print(f"Total sum: {total}")
\t     sum_numbers(2, 4, 6, 8)  
Output: 
\t Total sum: 20
args collects all extra arguments as a tuple.
@END
@START
5. Arbitrary Keyword Arguments (kwargs) – Multiple Key-Value Pairs!
If we need multiple named arguments, we use **kwargs.
Example:
\t def person_details(**info):
\t     for key, value in info.items():
\t        print(f"{key}: {value}")
\t     person_details(name="Alice", age=25, city="NYC")
kwargs collects arguments into a dictionary {}.
@END
