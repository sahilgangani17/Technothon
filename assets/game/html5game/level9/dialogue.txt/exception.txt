 Exceptions in Python: Handle Errors Like a Pro!
@START
 What Are Exceptions?
An exception is an unexpected event that disrupts the normal flow of a program.
Instead of crashing, Python lets you handle these exceptions gracefully!
Example: Imagine shopping online:
Card Declined → You entered the wrong card details.
Insufficient Funds → Not enough balance.
Server Error → Payment gateway is down.
Instead of abruptly stopping, the system handles errors and asks you to try again.
@END 
@START
Exception Handling: try and except
try ➝ Runs risky code 
except ➝ Catches & handles errors 
\t try:
\t     num = int(input("Enter a number: "))  # User enters a string → Error!
\t     print("You entered:", num)
\t except ValueError:
\t     print("Invalid input! Please enter a number.")
Output:
Enter a number:  #suppose we entered 6
You entered: 6
 else – Runs If No Error Occurs
If no exception occurs, the else block runs.
try:
    money = 50
    price = 40
    if money >= price:
        print("🎁 Purchase successful!")
    else:
        raise ValueError("Not enough money!")
except ValueError as e:
    print(f"❌ Error: {e}")
else:
    print("✅ Enjoy your new gift!")
💰 Analogy: Buying a gift? If your money is enough, you successfully checkout!

🚀 Key Takeaways:
✅ Use try-except to prevent crashes.
✅ Multiple except blocks for different errors.
✅ finally always runs (cleanup tasks).
✅ else executes only if try succeeds.

With proper exception handling, your code becomes 🔥 robust & user-friendly! 🚀
