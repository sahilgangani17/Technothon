Sets in Python â€“ Definition & Usage!
@START
A set in Python is like a collection of unique items, similar to a bag of marbles where no two marbles are the same ðŸŽ¯. It stores unordered, non-duplicate values inside curly braces {}.
What is a Set?
1. No Duplicates â€“ Automatically removes repeated values.
2. Unordered â€“ No fixed order of elements.
3. Immutable Elements â€“ You canâ€™t change set elements, but you can add or remove them.
4. Fast Lookups â€“ Checking if an item exists is very efficient.
@END
@START
Creating a Set
\t # Creating a set with unique values
\t fruits = {"apple", "banana", "cherry"}
\t # Creating a set with duplicates (Python automatically removes duplicates)
\t numbers = {1, 2, 3, 3, 4, 5, 5}
\t print(fruits)
\t print(numbers)  
Output:
\t {"apple", "banana", "cherry"}
\t {1, 2, 3, 4, 5}
@END
@START
Accessing Elements in a Set
Since sets are unordered, they donâ€™t support indexing like lists or tuples. However, you can check for an elementâ€™s presence using the in keyword.
\t print("banana" in fruits)  
\t print("grape" in fruits)  
Output: 
\t True
\t False
@END 
@START
When to Use Sets?
1. When you need unique items only (e.g., storing student IDs, tags, etc.).
2. When you need fast membership checks (if item in set).
3. When order doesnâ€™t matter (since sets are unordered).
4. When performing set operations like union, intersection, and difference.
@END
