@START
Conditional statements allow a program to execute different code blocks depending on whether a condition is true or false.
Key Points About Conditionals
- They control the flow of a program by selectively executing code based on conditions.
- Conditional statements use the `if` keyword followed by a condition.
- Components:
  - if statement: Executes a code block if the condition is true.
  - else statement: Executes a code block if the `if` condition is false.
  - elif statement: Allows checking multiple conditions sequentially.
@END
@START
If Statement
Executes a block of code only if the condition is met.
Syntax: 
\t if condition:
\t     # Code to execute if the condition is True
@END
@START
If-Else Statement
Executes the `else` block if the `if` condition is false.
Syntax:
\t if condition:
\t     # Code to execute if the condition is True
\t else:
\t     # Code to execute if the condition is False
@END 
@START
Elif Statement
Checks multiple conditions in sequence.
Syntax: 
\t if condition1:
\t     # Code to execute if condition1 is True
\t elif condition2:
\t     # Code to execute if condition2 is True
\t elif condition3:
\t     # Code to execute if condition3 is True
\t else:
\t     # Code to execute if none of the conditions are True
@END 
@START
Operators like ==, !=, <, >, <=, and >= compare values, while `and`, `or`, and `not` combine conditions. Indentation is essential for structuring conditionals in Python.
@END
@START
Important Aspects of Conditionals
- Comparison operators: `==`, `!=`, `<`, `>`, `<=`, `>=` compare values.
- Logical operators: `and`, `or`, `not` combine multiple conditions.
- Indentation: Python requires proper indentation to define blocks of code.
@END
