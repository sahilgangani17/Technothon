Classes & Objects in Python – The Blueprint of Life! 
@START
What’s a Class?
A class is like a blueprint or template used to create multiple objects. Think of it as a recipe —it defines what ingredients (attributes) and steps (methods) are needed, but you can use it to create different dishes (objects)!
Imagine This:
You want to make thousands of cars. Instead of designing each car separately, you create a blueprint that defines the basic features of a car—like color, wheels, and model.
The Class Defines:
- Properties (Attributes) – Things like color, wheels, and model.
- Actions (Methods) – Things the car can do, like honking or driving.
@END 
@START
What’s an Object?
An object is a real instance of a class. Think of it as an actual car created from the blueprint. 
Each car (object) follows the same structure but can have different properties.
For example, from our Car class, we can create:
A red sedan with 4 wheels.
A blue sports car with 4 wheels.
Even though they are different cars, they are both objects of the same class!
@END 
@START
Class & Object in Python (Only Essentials)
\t class Car:
\t     def __init__(self, color, model):
\t         self.color = color
\t         self.model = model
\t     def drive(self):
\t         print(f"The {self.color} {self.model} is driving!")
\t my_car = Car("red", "Sedan")  # Creating an object
\t my_car.drive()  # Output: The red Sedan is driving!
Output:
\t The red Sedan is driving!
@END 
@START
Key Takeaways:
->  A class is a blueprint that defines attributes & behaviors.
-> An object is an instance of a class.
-> Objects can have different values but follow the same structure.
-> Methods define what an object can do, like drive().
Fun Fact: Everything in Python—numbers, strings, lists—is actually an object of some class! 
@END
