Polymorphism in Python – One Name, Many Forms!
@START
What is Polymorphism?
Polymorphism lets different objects use the same method name but implement it in their own way. Think of it like a universal remote —the same button works for TV , AC , and speakers , but performs different actions!
->  Same method name, different implementations
-> Behavior changes based on object type
-> Makes code flexible & reusable
@END 
@START
⚙ Example: Different Shapes, Same Method!
\t class Shape:
\t     def area(self): pass  # Placeholder method
\t class Circle(Shape):
\t     def __init__(self, r): self.r = r
\t     def area(self): return 3.14 * self.r * self.r  # π * r²
\t class Square(Shape):
\t     def __init__(self, s): self.s = s
\t     def area(self): return self.s * self.s  # side²
\t # Using Polymorphism
\t for shape in [Circle(5), Square(4)]:
\t    print("Area:", shape.area())  # Calls respective class's method
 What’s Happening?
Both Circle and Square have an area() method but compute the area differently.
The same method name works for both objects!
@END 
@START
Why Use Polymorphism?
1. Write cleaner, reusable code
2. Handle different objects in a single loop
3. Makes code more dynamic & flexible
Polymorphism makes your programs smarter & scalable! 
@END 
