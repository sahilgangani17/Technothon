Inheritance in Python – Passing Down the Power!
@START
What is Inheritance?
Inheritance is like getting traits from your parents! 
In Python, a class can inherit properties and methods from another class, so you don’t have to rewrite the same code again and again.
Imagine a general blueprint for a vehicle , but then we create specific types like Car and Bike, which share some common features but also have their own unique traits.
@END 
@START
Why Use Inheritance?
-> Code Reusability – No need to rewrite the same code for similar classes.
-> Organization – Keep common features in a base class and extend only what’s necessary.
-> Flexibility – Easily modify or extend functionality without breaking other parts.
@END 
@START
How Inheritance Works?
 Parent & Child Classes
Parent Class (Base Class) – The main class with common features.
Child Class (Derived Class) – Inherits from the parent and can add its own features.
 Syntax:
\t class Vehicle:  # Parent Class
\t     def __init__(self, brand):
\t         self.brand = brand
\t     def show_brand(self):
\t         print(f"This is a {self.brand} vehicle.")
\t class Car(Vehicle):  # Child Class inheriting from Vehicle
\t     def drive(self):
\t         print(f"The {self.brand} car is driving!")
\t my_car = Car("Tesla")  # Creating an object of Car
\t my_car.show_brand()  # Inherited method
\t my_car.drive()  # Child class method
Output:
\t This is a Tesla vehicle.
\t The Tesla car is driving!
@END 
@START
Types of Inheritance in Python
1️ Single Inheritance – One child inherits from one parent.
2️ Multiple Inheritance – A child class inherits from multiple parents.
3️ Multilevel Inheritance – A class inherits from another class, which itself is a child of another class.
4️ Hierarchical Inheritance – Multiple child classes inherit from a single parent.
@END 
@START
Key Takeaways:
1.  Inheritance lets child classes reuse and extend parent class features.
2. Reduces code duplication and keeps things organized.
3. Child classes can add their own unique methods while keeping common ones.
4. You can override parent class methods for customization.
Think of it like a family business passing down skills!  
Now go and inherit some Python knowledge! 
@END
